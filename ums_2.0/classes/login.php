<?php	require_once('config.php');	require_once('classes/synchronizable.php');	require_once('classes/user.php');	require_once('classes/usergroup.php');	require_once('classes/permission.php');	class Login 	{			private static $permissionCache = null;			public static function loginUser($user, $pass)		{			$users = Synchronizable::load('User', User::$table, array('username' => $user));			if ($users == null) return false;			$user = $users[0];			if ($user->getPasswordHash() != md5($pass)) return false;						$_SESSION['id'] = $user->getID();			return true;		}				public static function logout()		{			$wasLoggedIn = self::isLoggedIn();			unset($_SESSION['id']);			return $wasLoggedIn;		}				public static function getCurrentUser()		{			if (!isset($_SESSION['id']) or $_SESSION['id'] == -1)				return null;							$users = Synchronizable::load('User', User::$table, array('id' => $_SESSION['id']));			return $users[0];			//return User::fromDatabase($_SESSION['id']);		}				public static function isLoggedIn()		{			return self::getCurrentUser() != null;		}				// 4 (100) = admin, 2 (010) = user, 1 (001) = guest		public static function getPermissions()		{				if (!Login::isLoggedIn())				$p = 1; // 000001			elseif (Login::getCurrentUser()->getIsAdmin())				$p = 4; // 000100			else				$p = 2; // 000010						return $p;		}				public static function permitted_obsolete2($permissionName, $default = false)		{			$currentUser = Login::getCurrentUser();			if (!is_null($currentUser))			{				$groups = $currentUser->getGroups();				$useDefault = true;				$allowed = true;								foreach ($groups as $group)				{					$ps = Synchronizable::load('Permission', 'ums_permissions', array('name' => $permissionName, 'group' => $group->getID()));					if (!is_null($ps))					{						$permission = $ps[0];						$useDefault = false;						if (!$permission->isAllowed())						{							$allowed = false;							break;						}					}				}								if ($useDefault)					return $default;				else					return $allowed;			}			else				return $default;		}				public static function permitted($permissionName, $default = false)		{			global $config;					$currentUser = Login::getCurrentUser();			if (is_null($currentUser) || is_null($groups = $currentUser->getGroups()))				$groups = Synchronizable::load('UserGroup', 'ums_usergroups', array('id' => $config['guestGroup']));							if (is_null($groups))				return $default;							//print_r($groups);			foreach ($groups as $group)			{					$perm = Login::isAllowed($permissionName, $group);				if (!is_null($perm))					return $perm;			}						//echo "[$permissionName default]";			return $default;		}			private static function isAllowed($permissionName, $group)		{			if (is_null(self::$permissionCache))				self::$permissionCache = Synchronizable::load('Permission', 'ums_permissions');					$perm = null;			foreach (self::$permissionCache as $permission)			{				if ($permission->getName() == $permissionName && $permission->getGroup() == $group->getID())				{					$perm = $permission;					break;				}			}			//$perm = Synchronizable::load('Permission', 'ums_permissions', array('name' => $permissionName, 'group' => $group->getID()));			if (is_null($perm))			{				if (is_null($group->getSuperGroup()))					return null;				else					return Login::isAllowed($permissionName, $group->getSuperGroup());			}			else			{				$allowed = $perm->isAllowed();				return $allowed;			}		}			/*private static function isAllowed($permissionName, $group, $current = false)		{			$perm = Synchronizable::load('Permission', 'ums_permissions', array('name' => $permissionName, 'group' => $group->getID()));			if (is_null($perm))			{				if (is_null($group->getSuperGroup()))				{					//echo "$permissionName -> default: $default";					return $current;				}				else					return Login::isAllowed($permissionName, $group->getSuperGroup(), $current);			}			else			{				$allowed = $perm[0]->isAllowed();				//echo "$permissionName -> found: $allowed";				return $allowed;			}		}*/			}	?>